Description: >
    CloudDevOps Capstone,
    This is the template to create Stack for EKS
    Created by: Mahmoud Rashwan | May, 2020.

Parameters:
    EnvName:
        Description: Environment Name used by and whithin Stacks.
        Type: String
    JumpKey:
        Description: SSH Key for Access JumpBox
        Type: String
    NodeInstanceType:
        Description: Instance Type | Using Default for testing only
        Type: String
        Default: t2.micro
    NodeAMI:
        Description: worker node instances ImageId.
        Type: String
        Default: ami-011c865bf7da41a9d
    ClusterName:
        Type: String
        Description: The cluster name.

Resources:
    ClusterControlSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow inbound & outbound traffic to our infrastructure
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvName}-VPC"
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0
    EksMainCluster:
            Type: AWS::EKS::Cluster
            Properties:            
                Name: !Ref ClusterName
                ResourcesVpcConfig:
                    SecurityGroupIds:
                        -   !Ref ClusterControlSG
                    SubnetIds:
                        -   Fn::ImportValue: !Sub "${EnvName}-PublicSubnet1"
                        -   Fn::ImportValue: !Sub "${EnvName}-PublicSubnet2"
                RoleArn: arn:aws:iam::690913189526:role/CapestoneEKSClusterRole
                Version: '1.14'
    WorkerNodeInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
              !Sub ${EnvName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
                - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    WorkerNodeInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                -   Ref: WorkerNodeInstanceRole
    WorkerNodeSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: SG attached to all nodes.
            Tags:
                -   Key: !Sub kubernetes.io/cluster/${ClusterName}
                    Value: Priv
            VpcId:
              Fn::ImportValue:
                    !Sub "${EnvName}-VPC"
    WorkerNodeSGIn:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Allow internal communicattion btween nodes.
            IpProtocol: "-1"
            FromPort: 0
            ToPort: 65535
            GroupId: !Ref WorkerNodeSG
            SourceSecurityGroupId: !Ref WorkerNodeSG
    ClusterControlSGIn:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Communicate to cluster API Server
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            GroupId: !Ref ClusterControlSG
            SourceSecurityGroupId: !Ref WorkerNodeSG
    EgressToNodeSG:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Comunicate from cluster control to worker nodes.
            IpProtocol: tcp
            FromPort: 1025
            ToPort: 65535
            GroupId: !Ref ClusterControlSG
            DestinationSecurityGroupId: !Ref WorkerNodeSG
    HTTPSEgressToNodeSGroup:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Comunicate from controlplane to nodes over https.
            IpProtocol: tcp
            FromPort: 443            
            ToPort: 443
            GroupId: !Ref ClusterControlSG
            DestinationSecurityGroupId: !Ref WorkerNodeSG
    IngressFromControlPlaneSG:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Comunicate from controlplane to nodes.
            IpProtocol: tcp
            FromPort: 1025
            ToPort: 65535
            GroupId: !Ref WorkerNodeSG
            SourceSecurityGroupId: !Ref ClusterControlSG
    HTTPSIngressFromControlPlaneSG:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: WorkerNodeSG
        Properties:
            Description: Recieve comunication to nodes over https controlplane
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            GroupId: !Ref WorkerNodeSG
            SourceSecurityGroupId: !Ref ClusterControlSG
    WorkerNodeLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            AssociatePublicIpAddress: 'true'
            SecurityGroups:
                -   Ref: WorkerNodeSG
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    set -o xtrace
                    /etc/eks/bootstrap.sh ${ClusterName}
                    /opt/aws/bin/cfn-signal --exit-code $? \
                             --stack  ${AWS::StackName} \
                             --resource NodeGroup  \
                             --region ${AWS::Region}
            KeyName: JumpKey
            IamInstanceProfile: !Ref WorkerNodeInstanceProfile
            ImageId: !Ref NodeAMI
            InstanceType: !Ref NodeInstanceType
            BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        DeleteOnTermination: true
                        VolumeSize: 20
                        VolumeType: gp2
    WorkerNodeAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            DesiredCapacity: 4
            LaunchConfigurationName: !Ref WorkerNodeLaunchConfig
            MinSize: 4
            MaxSize: 4
            VPCZoneIdentifier:
                -   Fn::ImportValue: !Sub "${EnvName}-PublicSubnet1"
                -   Fn::ImportValue: !Sub "${EnvName}-PublicSubnet2"
            Tags:
                - Key: Name
                  PropagateAtLaunch: "true"
                  Value: !Sub ${ClusterName}-WorkerNode
                -  Key: !Sub kubernetes.io/cluster/${ClusterName}
                   PropagateAtLaunch: "true"
                   Value: priv
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: "1"
                MinInstancesInService: 1
                PauseTime: PT5M
Outputs:
    WorkNodesIAMRoleArn:
        Description: Worker node Instance role ARN for using in configuration map.
        Value: !GetAtt WorkerNodeInstanceRole.Arn

